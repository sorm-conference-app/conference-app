/**
 * File generated by the Supabase CLI.
 * If the database schema changes, run:
 * `supabase gen types typescript --project-id izlxjqgiauljmlqtzrto > types\Supabase.types.ts`
 */
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[];

export type Database = {
  public: {
    Tables: {
      events: {
        Row: {
          id: number;
          created_at: string;
          title: string;
          start_time: string;
          end_time: string;
          location: string;
          description: string | null;
          type: string | null;
          speaker: string | null;
          slides_url: string | null;
          speaker_name: string | null;
          speaker_title: string | null;
          speaker_bio: string | null;
          event_date: string;
        };
        Insert: {
          id?: number;
          created_at?: string;
          title: string;
          start_time: string;
          end_time: string;
          location: string;
          description?: string | null;
          type?: string | null;
          speaker?: string | null;
          slides_url?: string | null;
          speaker_name?: string | null;
          speaker_title?: string | null;
          speaker_bio?: string | null;
          event_date: string;
        };
        Update: {
          id?: number;
          created_at?: string;
          title?: string;
          start_time?: string;
          end_time?: string;
          location?: string;
          description?: string | null;
          type?: string | null;
          speaker?: string | null;
          slides_url?: string | null;
          speaker_name?: string | null;
          speaker_title?: string | null;
          speaker_bio?: string | null;
          event_date?: string;
        };
        Relationships: [];
      };
      test_announcements: {
        Row: {
          body: string;
          created_at: string;
          id: number;
          title: string | null;
        };
        Insert: {
          body: string;
          created_at?: string;
          id?: number;
          title?: string | null;
        };
        Update: {
          body?: string;
          created_at?: string;
          id?: number;
          title?: string | null;
        };
        Relationships: [];
      };
      contact_info: {
        Row: {
          id: number;
          first_name: string;
          last_name: string;
          phone_number: string;
          email: string;
          created_at: string;
        };
        Insert: {
          id?: number;
          first_name: string;
          last_name: string;
          phone_number: string;
          email: string;
          created_at?: string;
        };
        Update: {
          id?: number;
          first_name?: string;
          last_name?: string;
          phone_number?: string;
          email?: string;
          created_at?: string;
        };
        Relationships: [];
      };
      test_profiles: {
        Row: {
          created_at: string;
          expo_push_token: string;
          id: string;
        };
        Insert: {
          created_at?: string;
          expo_push_token: string;
          id?: string;
        };
        Update: {
          created_at?: string;
          expo_push_token?: string;
          id?: string;
        };
        Relationships: [];
      };
      attendee_info: {
        Row: {
          id: number;
          created_at: string;
          email: string;
          name: string | null;
          organization: string | null;
          title: string | null;
          additional_info: string | null;
          is_admin: boolean;
          share_info: boolean;
          seen_share_info_popup: boolean;
        };
        Insert: {
          id?: number;
          created_at?: string;
          email: string;
          name?: string | null;
          organization?: string | null;
          title?: string | null;
          additional_info?: string | null;
          is_admin?: boolean;
          share_info?: boolean;
          seen_share_info_popup?: boolean;
        };
        Update: {
          id?: number;
          created_at?: string;
          email?: string;
          name?: string | null;
          organization?: string | null;
          title?: string | null;
          additional_info?: string | null;
          is_admin?: boolean;
          share_info?: boolean;
          seen_share_info_popup?: boolean;
        };
        Relationships: [];
      };
      test_attendee_info: {
        Row: {
          id: number;
          created_at: string;
          email: string;
          name: string | null;
          organization: string | null;
          title: string | null;
          additional_info: string | null;
          is_admin: boolean;
          share_info: boolean;
        };
        Insert: {
          id?: number;
          created_at?: string;
          email: string;
          name?: string | null;
          organization?: string | null;
          title?: string | null;
          additional_info?: string | null;
          is_admin?: boolean;
          share_info?: boolean;
        };
        Update: {
          id?: number;
          created_at?: string;
          email?: string;
          name?: string | null;
          organization?: string | null;
          title?: string | null;
          additional_info?: string | null;
          is_admin?: boolean;
          share_info?: boolean;
        };
        Relationships: [];
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      [_ in never]: never;
    };
    CompositeTypes: {
      [_ in never]: never;
    };
  };
};

type DefaultSchema = Database[Extract<keyof Database, "public">];

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? (Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      Database[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R;
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R;
      }
      ? R
      : never
    : never;

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I;
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I;
      }
      ? I
      : never
    : never;

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof Database },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U;
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U;
      }
      ? U
      : never
    : never;

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }
  ? Database[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never;

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never;

export const Constants = {
  public: {
    Enums: {},
  },
} as const;
